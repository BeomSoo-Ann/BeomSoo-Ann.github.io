<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-26T16:02:48+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Code My Cosmos</title><subtitle>코딩 공부하다 천문학에 빠져버린 초보 개발자</subtitle><author><name>BeomRam</name></author><entry><title type="html">아프다…</title><link href="http://localhost:4000/blog/Restart/" rel="alternate" type="text/html" title="아프다…" /><published>2022-09-26T00:00:00+09:00</published><updated>2022-09-26T00:00:00+09:00</updated><id>http://localhost:4000/blog/Restart</id><content type="html" xml:base="http://localhost:4000/blog/Restart/"><![CDATA[<p>두 달 넘게 블로그 업데이트를 거의 하지 않고 있었다…</p>

<p>건강이 많이 안좋아졌다. 거의 두 달 동안 하루에 2시간 이상 잠을 잔 적이 없다…</p>

<p>완치된 줄 알았던 아토피가 최근에 재발했다. 간지러움에 밤에 한숨도 잘 수 없었다.</p>

<p>22년 그럴싸한 계획을 많이 세웠고 6월, 7월까지는 지키는 듯 싶었으나 몸이 안좋아지니 할 수도, 하고싶지도 않아졌다.</p>

<p>그래도 최근 센 약을 먹기 시작하면서 조금씩 버틸 수 있게 되었다.</p>

<p>벌써 10월이다. 내 공익 생활도 한달이 채 남지 않았다.</p>

<p>남은 기간 동안 조금씩이라도 무언가를 하자. 힘내보자.</p>]]></content><author><name>BeomRam</name></author><category term="Blog" /><summary type="html"><![CDATA[건강관리의 중요성]]></summary></entry><entry><title type="html">Research Proposal - 딥러닝을 사용한 천문 데이터 처리</title><link href="http://localhost:4000/project/Research-Proposal/" rel="alternate" type="text/html" title="Research Proposal - 딥러닝을 사용한 천문 데이터 처리" /><published>2022-07-28T00:00:00+09:00</published><updated>2022-07-28T00:00:00+09:00</updated><id>http://localhost:4000/project/Research-Proposal</id><content type="html" xml:base="http://localhost:4000/project/Research-Proposal/"><![CDATA[<blockquote>
  <p>7월 12일, James Webb Space Telescope(JWST)가 첫 관측 데이터를 지구로 보냈다.
지금까지 천문우주과학에 큰 기여를 했던 Hubble Space Telescope (HST)와 JWST의 데이터를 사용하여 과거의 데이터를 보정해주는 딥러닝 알고리즘을 개발해보자.</p>
</blockquote>

<h2 id="1-background">1. BACKGROUND</h2>

<p>James Webb Space Telescope(JWST)는 Hubble Space Telescope (HST)의 뒤를 잇는 우주 천체 망원경으로 네 가지 주요 임무를 가지고 현재 활동 중이다.
JWST의 네 가지 임무는 다음과 같다.</p>

<blockquote>
  <ol>
    <li>빅뱅 이후 형성된 최초의 별과 은하 탐색</li>
    <li>은하의 형성과 진화 연구</li>
    <li>별과 행성의 형성 연구</li>
    <li>외계 생명 탐사</li>
  </ol>
</blockquote>

<p>관측을 위한 탑재체는 총 세 가지가 있다.</p>

<blockquote>
  <ol>
    <li>NIRCam(Near Infrared Camera) : 근적외선 카메라</li>
    <li>NIRSpec(Near Infrared Spectrograph) : 근적외선에 대한 분광 관측</li>
    <li>MIRI(Mid-Infrared Instrument) : 중적외선 카메라와 분광기</li>
  </ol>
</blockquote>

<p>JWST의 데이터는 <a href="https://mast.stsci.edu/portal/Mashup/Clients/Mast/Portal.html"><strong>STScI</strong></a>에서 확인할 수 있다.</p>

<h2 id="2-reasearch-questions">2. REASEARCH QUESTIONS</h2>

<h2 id="3-reasearch-methods">3. REASEARCH METHODS</h2>

<h2 id="4-plan-of-work">4. PLAN OF WORK</h2>

<h2 id="5-biblography">5. BIBLOGRAPHY</h2>]]></content><author><name>BeomRam</name></author><category term="Project" /><summary type="html"><![CDATA[HST와 JWST 데이터를 Training Data로 활용하여 딥러닝을 학습시켜보자]]></summary></entry><entry><title type="html">천문학개론2 - 보이저 1호 데이터 처리하기</title><link href="http://localhost:4000/astronomy/practice-day2/" rel="alternate" type="text/html" title="천문학개론2 - 보이저 1호 데이터 처리하기" /><published>2022-05-17T00:00:00+09:00</published><updated>2022-05-17T00:00:00+09:00</updated><id>http://localhost:4000/astronomy/practice-day2</id><content type="html" xml:base="http://localhost:4000/astronomy/practice-day2/"><![CDATA[<blockquote>
  <p>조금 더 복잡한 데이터를 파이썬 코드를 통해 처리해보자!
저번 실습에서는 FITS 파일의 데이터를 이미지화했다면, 이번에는 txt 파일의 데이터를 <strong>그래프화</strong> 해보자.</p>
</blockquote>

<h2 id="1-개요">1. 개요</h2>

<p><a href="https://cdaweb.gsfc.nasa.gov"><strong>NASA GSFC</strong></a>(Goddard Space Flight Center)에서 <strong>Voyager 1</strong>이 전송한 Distance, Magnetic field, Proton Flux data를 받아 파이썬 코드를 통해 그래프로 출력해보자.
이를 통해 Voyager 1이 태양권계면을 통과한 시점을 추측해보자.</p>

<h2 id="2-modules">2. Modules</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<ul>
  <li><strong>datetime</strong>: 날짜, 시간 자료를 처리해주는 모듈</li>
  <li><strong>numpy</strong>: 배열을 생성하고, 배열의 연산을 수행하는 모듈</li>
  <li><strong>matplotlib</strong>: 데이터를 시각화해주는 모듈
    <ul>
      <li><strong>pyplot</strong>: 그래프를 그리는 모듈</li>
    </ul>
  </li>
</ul>

<h2 id="3-데이터-처리">3. 데이터 처리</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">file</span> <span class="o">=</span> <span class="s">'데이터 주소/데이터 이름.txt'</span>
<span class="n">full_text</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
</code></pre></div></div>

<p>위의 코드를 통해 텍스트 파일을 읽을 것이다. FITS와 다르게 txt는 여러 분야에서 흔히 사용하기 때문에 python 내장 함수인 open으로도 충분히 읽어올 수 있다.</p>

<p>데이터의 구조는 다음과 같다.</p>

<p><img src="/assets/images/astro_day2.png" alt="" class="align" />
이 파일에서 우리는 date, time, distance, magnetic, proton data를 분리할 것이다.</p>

<p>이 데이터들을 분리하려면 먼저 데이터를 제외한 정보들을 제거해야한다. 이후 각 행을 한 줄씩 읽으면서 각 열의 데이터를 각각 다른 array로 저장하면 된다.
읽어야 할 데이터의 양이 많으니 while문으로 무한 루프를 만든 후 특정 조건에 루프를 벗어나도록 하자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 각 데이터를 담을 list를 선언해준다.
</span><span class="n">date</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">time</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">distance</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">magnetic</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">proton</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>   <span class="c1"># 데이터의 행을 구분해주기 위한 변수 n
</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
  <span class="n">line</span> <span class="o">=</span> <span class="n">full_text</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span>   <span class="c1"># 행을 한 줄씩 불러온다.
</span>
  <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span><span class="p">:</span>   <span class="c1"># 불러올 행이 없는 경우 루프를 break한다.
</span>    <span class="k">break</span>
  <span class="k">if</span> <span class="s">'#'</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>   <span class="c1"># '#'이 들어간 행은 데이터가 없는 행이므로 continue한다.
</span>    <span class="k">continue</span>

  <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="n">columns</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>   <span class="c1"># 각 행의 데이터는 space로 구분되어있기 때문에 split해준다.
</span>
  <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>   <span class="c1"># 첫 줄은 데이터의 정보가 담겨있다. header로 분류해준다.
</span>    <span class="n">header</span> <span class="o">=</span> <span class="n">columns</span>
    <span class="k">continue</span>
  <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>   <span class="c1"># 둘째 줄은 데이터의 단위가 담겨있다. units로 분류해준다.
</span>    <span class="n">units</span> <span class="o">=</span> <span class="n">columns</span>
    <span class="k">continue</span>
  <span class="c1"># 데이터들 중 크기가 너무 작은 데이터가 존재하는 경우가 있다.
</span>  <span class="c1"># 이는 관측기기가 관측을 하지 않았거나 하지 못한 경우이므로 제외해주자.
</span>  <span class="k">if</span> <span class="nb">float</span><span class="p">(</span><span class="n">columns</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="o">-</span><span class="mf">1e30</span> <span class="ow">and</span> <span class="nb">float</span><span class="p">(</span><span class="n">columns</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="o">-</span><span class="mf">1e30</span><span class="p">:</span>
    <span class="k">continue</span>

  <span class="c1"># 예외사항을 모두 제거하고 남은 데이터들을 각 list에 저장해주자.
</span>  <span class="n">date</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">columns</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
  <span class="n">time</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
  <span class="n">distance</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">columns</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
  <span class="n">magnetic</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">columns</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
  <span class="n">proton</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">columns</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>

<span class="c1"># 분류한 데이터들을 처리하기 쉽게 array로 바꿔준다.
</span><span class="n">distance</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">distance</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
<span class="n">magnetic</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">magnetic</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
<span class="n">proton</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">proton</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>원래 실습 코드는 if문 아래에 또 if문 넣고, 그 밑에 또 if문 들어가고 자꾸 반복되길래 예외 조건만 꺼내서 continue하게 만들어 깔끔하게 정리해봤다.
글로 설명하기에는 너무 장황해져서 각 코드에 주석을 달아 설명을 줄이도록 하겠다.</p>
</blockquote>

<ul>
  <li><strong>array()와 asarray()의 차이점</strong><br />
array(): 데이터의 중복 여부와 상관없이 array를 만들어준다.<br />
asarray(): 데이터가 다를 경우에만 copy를 한다.</li>
</ul>

<p>날짜 데이터는 아직 date와 time 두 개의 데이터로 나누어져있다. 이 둘을 합쳐 하나의 데이터로 만들어보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 두 데이터를 병합하여 하나의 list에 담을 것이다.
</span><span class="n">dates</span> <span class="o">=</span> <span class="p">[]</span>
<span class="c1"># date 구조: 00-00-0000
# time 구조: 00:00:00.000
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">date</span><span class="p">)):</span>
    <span class="n">date1</span> <span class="o">=</span> <span class="n">date</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'-'</span><span class="p">)</span>
    <span class="n">time1</span> <span class="o">=</span> <span class="n">time</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">':'</span><span class="p">)</span>
    <span class="n">sec</span> <span class="o">=</span> <span class="n">time1</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)</span>

    <span class="n">day</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">date1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">month</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">date1</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">year</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">date1</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>

    <span class="n">hour</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">time1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">minute</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">time1</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">second</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sec</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">msec</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sec</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

    <span class="n">one_day</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="n">month</span><span class="p">,</span> <span class="n">day</span><span class="p">,</span> <span class="n">hour</span><span class="p">,</span> <span class="n">minute</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="n">msec</span><span class="p">)</span>
    <span class="n">dates</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">one_day</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>원래 코드는 데이터 순서를 일일이 세어서 day, month, year 등을 하나씩 나누었다.
그런데 이러한 작업을 굳이 할 필요가 있을까 싶어 split()을 사용하는 코드로 바꾸어보았다.</p>
</blockquote>

<h2 id="4-데이터-시각화">4. 데이터 시각화</h2>

<p>데이터를 모두 분류했으니, 분류한 데이터로 그래프를 그려보자!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x_data</span> <span class="o">=</span> <span class="n">distance</span> <span class="c1"># distance or dates
</span><span class="n">y_data</span> <span class="o">=</span> <span class="n">proton</span> <span class="c1"># proton or magentic / x_data가 dates일 경우 distance
</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x_data</span><span class="p">,</span> <span class="n">y_data</span><span class="p">)</span>
<span class="c1"># dates 이용시
# plt.plot_date(dates, y_data)
</span><span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/day2/Figure_1.png" alt="" class="align-center" /></p>

<p>x축 data를 distance, y축 data를 proton으로 설정한 그래프이다. 그래프는 잘 나왔지만, 생각보다 너무 밋밋하다. 그래프에 여러 가지 설명을 추가해보자!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Distance-Proton"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>   <span class="c1"># 그래프의 Title
</span><span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"Distance"</span> <span class="o">+</span> <span class="s">" ("</span><span class="o">+</span><span class="n">units</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="s">")"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>  <span class="c1"># x축 label
</span><span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">"Proton"</span><span class="o">+</span><span class="s">" ("</span><span class="o">+</span><span class="n">units</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="s">")"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>   <span class="c1"># y축 label
</span><span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span> <span class="c1"># x축 숫자 fontsize
</span><span class="n">plt</span><span class="p">.</span><span class="n">yticks</span><span class="p">(</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span> <span class="c1"># y축 숫자 fontsize
</span><span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">([</span><span class="s">"Proton"</span><span class="p">],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span> <span class="c1"># 그래프 우측 상단에 data name
</span>
<span class="c1"># data가 급격히 변화하는 시점을 선으로 그어 뚜렷하게 나타내보자.
# 변화 시점을 보니 Distance가 121.6AU일 때가 가장 급격히 변화한 것 같다
</span><span class="n">plt</span><span class="p">.</span><span class="n">axvline</span><span class="p">(</span><span class="mf">121.6</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">"r"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/images/day2/Figure_2.png" alt="" class="align-center" /></p>

<p>여러 가지 설명들이 추가되었다!</p>

<p>위 그래프를 보면 Voyager 1은 태양으로부터 <strong>121.6 AU</strong>를 날아갔을 때 태양권계면을 통과했다는 사실을 알 수 있다!</p>

<blockquote>
  <p>코드에서 data값만 바꿔주면 Distance-Magnetic graph, Dates-Distance graph 등의 그래프도 얻을 수 있다.
자세한 통과 시점을 얻기 위해 다른 그래프도 출력해보자.</p>
</blockquote>]]></content><author><name>BeomRam</name></author><category term="Astronomy" /><summary type="html"><![CDATA[보이저 1호가 지구로 보낸 데이터를 처리하여 태양권계면을 통과한 시점을 추측해보자]]></summary></entry><entry><title type="html">유럽 여행 - 런던 PART1</title><link href="http://localhost:4000/travel/London/" rel="alternate" type="text/html" title="유럽 여행 - 런던 PART1" /><published>2022-05-11T00:00:00+09:00</published><updated>2022-05-11T00:00:00+09:00</updated><id>http://localhost:4000/travel/London</id><content type="html" xml:base="http://localhost:4000/travel/London/"><![CDATA[<blockquote>
  <p>2022년 드디어 <strong>코로나</strong>가 끝을 보이기 시작했다. 그리고 나의 공익 생활도 끝이 보이기 시작했다..!
복무가 끝나면 가장 먼저 하고 싶은 것이 여행이다. 연말 여행을 떠나기 전에 20년도 떠났던 <strong>유럽 여행</strong>을 되돌아보려고 한다.</p>
</blockquote>

<h2 id="시작">시작</h2>

<p>19년도 2학기는 개인적으로 힘든 일이 너무 많았다. 자취방에서 술과 함께 나뒹굴다가 갑자기 결단을 내렸다.
이렇게 살면 안되겠다 싶어 학교를 중도휴학 해버렸다. 그리고 환불받은 등록금으로 무작정 런던행 티켓을 구매했다.
이 여행은 그렇게 시작되었다.</p>

<p><strong>2020년 2월 5일</strong>, 생각없이 즉흥적으로 정한, 현실에서 도망가는 날이었다.</p>

<h2 id="무계획">무계획</h2>

<p>19년 2학기 중간이 끝나고, 11월 초 즘 중도 휴학을 했으니 나에게는 약 3개월이 남아있었다. 아무런 생각도 없었다.
1월이 되고 약 한달정도 남으니 슬슬 계획을 세워야겠다는 생각이 들기 시작했다.</p>

<p>일단 런던에 가는 비행기를 구했으니, 런던에 숙소를 잡았다. 2주동안 런던에만 있으면 심심할 것 같아 한 주는 다른 나라로 가기로 결정했다.
갑자기 스페인이 떠올랐다. 무작정 런던-바르셀로나 비행기 티켓을 끊었다. 그리고 바르셀로나 숙소를 잡았다. 바르셀로나 하면 가우디가 유명해서 사그라다 파밀리아 성당 입장 티켓을 끊었다.</p>

<p>그리고 2월 5일, 드디어 떠나는 날이 다가왔다.</p>

<h2 id="출발">출발</h2>

<p><img src="/assets/images/travel/20200205_091425.jpg" alt="" class="align-center" /></p>

<p>2020년 1월 20일, 대한민국에서 첫 코로나 환자가 발생했다. 그때까지만 해도 그렇게 심해질 줄은 꿈에도 몰랐다. 전염성이 강하니 주의해야한다 정도였고 마스크도 잘 안쓰고 다녔다.
그런데 공항에 가니 그 여파를 느낄 수 있었다. 혹시나 사람이 많을까 싶어 평소에 쓰지도 않던 마스크도 단단히 쓰고 비닐 장갑까지 착용하고 공항으로 향했다. 그런데 막상 공항에 도착하니, 공항은 매우 한가했다. (사실 비수기라 그런지도 모르겠다.)
일찍 도착해서 여유롭게 체크인을 하고 수하물을 맡긴 뒤 비행기를 기다렸다.</p>

<h2 id="도착">도착</h2>

<p><img src="/assets/images/travel/KakaoTalk_Photo_2022-05-16-14-44-26.jpeg" alt="" class="align-center" /></p>

<p>지금 와서 보니 많은게 보인다! 자세히 보면 <strong>런던 아이</strong>도 보이고 <strong>타워 브릿지</strong>도 보인다. 런던 중심가가 한 번에 보인다!</p>

<p><img src="/assets/images/travel/KakaoTalk_Photo_2022-05-16-14-44-46.jpeg" alt="" class="align-center" /></p>

<p>처음엔 아무 생각 없이 찍은 사진인데 나중에 보니 북런던 지역이다! 비행기 날개 끝에 에미레이트 스타디움이 보인다. 참고로 나는 토트넘 팬이다. 아마 토트넘 핫스퍼 스타디움은 비행기 아래에 있을 것 같다. <del>아스날 망해라</del></p>

<p><img src="/assets/images/travel/20200205_152250.jpg" alt="" class="align-center" /></p>

<p>Paddington Station의 사진. 그냥 뭔가 있어보여서 찍어봤다. 여기서 숙소로 가는 지하철로 갈아탔다. 숙소 이름이 셜록 한인민박이었는데 알고보니 숙소가 Baker Street 근처에 있었다.</p>]]></content><author><name>BeomRam</name></author><category term="Travel" /><summary type="html"><![CDATA[나 홀로 떠난 유럽 여행]]></summary></entry><entry><title type="html">천문학개론2 - 태양 자전주기 구하기</title><link href="http://localhost:4000/astronomy/practice-day1/" rel="alternate" type="text/html" title="천문학개론2 - 태양 자전주기 구하기" /><published>2022-05-03T00:00:00+09:00</published><updated>2022-05-10T00:00:00+09:00</updated><id>http://localhost:4000/astronomy/practice-day1</id><content type="html" xml:base="http://localhost:4000/astronomy/practice-day1/"><![CDATA[<blockquote>
  <p>천문학개론2 강의에서 진행했던 실습을 개발자의 눈으로 복습해보자!<br />
원래의 실습에서는 태양의 자전 주기를 구하기 위한 계산식에 중점을 두지만, 이번 복습에서는 파이썬 코드를 통해 데이터를 읽고 처리하는 것에 중점을 두고자 한다.</p>
</blockquote>

<h2 id="1-개요">1. 개요</h2>

<p><a href="https://www.helioviewer.org"><strong>Helioviewer</strong></a>에서 <strong>PROBA-2 위성</strong>의 태양 관측 데이터를 받아 파이썬 코드를 통해 처리한다.
처리한 데이터로 태양 표면 활동지역의 이동 속도를 구하고, 이를 이용하여 태양의 자전 주기를 구한다.</p>

<h2 id="2-modules">2. Modules</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">astropy.io.fits</span> <span class="k">as</span> <span class="n">fits</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<ul>
  <li><strong>numpy</strong>: 배열을 생성하고, 배열의 연산을 수행하는 모듈</li>
  <li><strong>astropy</strong>: 천문학 데이터를 읽고 처리하는 모듈
    <ul>
      <li><strong>fits</strong>: FITS 파일을 읽고 처리하는 모듈</li>
    </ul>
  </li>
  <li><strong>matplotlib</strong>: 데이터를 시각화해주는 모듈
    <ul>
      <li><strong>pyplot</strong>: 그래프를 그리는 모듈</li>
    </ul>
  </li>
</ul>

<h2 id="3-데이터-읽기">3. 데이터 읽기</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">image_data</span> <span class="o">=</span> <span class="n">fits</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'데이터 주소/데이터 이름.fits'</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">image_data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">data</span>
<span class="n">header</span> <span class="o">=</span> <span class="n">image_data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">header</span>
</code></pre></div></div>

<p>앞에서 import한 astropy.io.fits 모듈을 사용하여 FITS 파일을 읽는다. FITS 파일은 header와 data로 구성되어 있다. header와 data를 각각의 변수에 저장한다.</p>

<p><em>image_data.info()</em> 코드를 실행하면 image_data의 정보가 출력된다.</p>

<h2 id="4-데이터-시각화">4. 데이터 시각화</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 이 코드는 다음 에러를 무시하기 위한 코드이다.
# RuntimeWarning: divide by zero encountered in log
</span><span class="n">np</span><span class="p">.</span><span class="n">seterr</span><span class="p">(</span><span class="n">divide</span><span class="o">=</span><span class="s">'ignore'</span><span class="p">)</span>

<span class="n">image</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
<span class="c1"># 밝기 조절
</span><span class="n">max_value</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">percentile</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">min_value</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">percentile</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'hot'</span><span class="p">,</span> <span class="n">origin</span><span class="o">=</span><span class="s">'lower'</span><span class="p">,</span>
<span class="n">vmax</span><span class="o">=</span><span class="n">max_value</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=</span><span class="n">min_value</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><strong>np.array(data)</strong>를 사용하여 데이터를 배열로 변환한다. 이후 <strong>np.log</strong>를 사용하여 데이터를 로그로 변환한다. 천문학 데이터들은 스케일이 크기 때문에 로그 스케일로 변환하는게 좋다!
이제 numpy를 통해 필요한 데이터를 모두 처리했다.</p>

<p>본격적으로 matplotlib을 사용하여 데이터를 시각화해보자. <strong>plt.figure</strong>는 그래프 평면을 생성해준다. <strong>figsize</strong>로 그래프의 크기를 설정하자. <strong>plt.imshow</strong>는 그래프 평면 위에 데이터를 그리는 함수이다. 우리가 시각화 하고싶은 데이터인 <strong>image</strong>를 파라미터로 입력하자. 이후 데이터가 더 잘 보일 수 있게 하기 위해 <strong>cmap</strong>으로 색상을 결정한다. 그리고 <strong>vmax</strong>와 <strong>vmin</strong>을 통해 밝기의 최대값과 최솟값을 설정한다.</p>

<p>여기서 끝난다면 이미지 데이터는 상하반전이 된 채로 보일 것이다! 그 이유는 파이썬 배열의 특성에 있다. 파이썬 배열은 행렬 구조로 행은 위에서 아래로 진행하기 때문에 상하반전이 되는 것이다. 이를 해결하기 위해 <strong>origin=’lower’</strong>을 통해 우리가 아는 수학적, 물리적 좌표계로 전환해준다.</p>

<p>이제 <strong>plt.show</strong>를 실행하여 이미지를 console에 출력해보자!
<img src="/assets/images/astro_solar.png" alt="" class="align-center" />
다음과 같은 그래프가 출력된다면 성공이다!</p>

<h2 id="5-데이터-활용">5. 데이터 활용</h2>

<p>이제 관측 시간이 다른 2개 이상의 데이터를 사용하여 그래프를 출력한 뒤, 태양 표면 활동지역의 이동속도를 구하면 태양의 자전주기를 구할 수 있다!</p>

<blockquote>
  <p>태양 자전주기 = 2π × (태양 R) / (태양 표면 활동지역의 ⱱ)</p>
</blockquote>]]></content><author><name>BeomRam</name></author><category term="Astronomy" /><summary type="html"><![CDATA[태양 표면의 활동지역을 이용하여 태양의 자전 주기를 구해보자.]]></summary></entry><entry><title type="html">Github blog의 첫 시작</title><link href="http://localhost:4000/blog/first-post/" rel="alternate" type="text/html" title="Github blog의 첫 시작" /><published>2022-04-27T00:00:00+09:00</published><updated>2022-04-27T00:00:00+09:00</updated><id>http://localhost:4000/blog/first-post</id><content type="html" xml:base="http://localhost:4000/blog/first-post/"><![CDATA[<p>우주과학과에 들어와서 별로 흥미를 느끼지 못하고 열심히 놀기만 했다.</p>

<p>코딩을 접하며 코딩 뿐만 아니라 천문학, 우주과학에도 관심을 가지기 시작했다!</p>

<p>이 글, 이 블로그와 함께 첫 발을 내딛어보자!</p>]]></content><author><name>BeomRam</name></author><category term="Blog" /><summary type="html"><![CDATA[지금까지 해온 공부, 지금부터 시작할 공부를 기록하기 위해 시작합니다!]]></summary></entry></feed>