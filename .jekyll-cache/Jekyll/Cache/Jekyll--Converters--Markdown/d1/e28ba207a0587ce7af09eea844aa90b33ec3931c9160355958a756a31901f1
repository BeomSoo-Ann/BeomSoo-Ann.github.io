I"<blockquote>
  <p>천문학개론2 강의에서 진행했던 실습을 개발자의 눈으로 복습해보자!<br />
원래의 실습에서는 태양의 자전 주기를 구하기 위한 계산식에 중점을 두지만, 이번 복습에서는 파이썬 코드를 통해 데이터를 읽고 처리하는 것에 중점을 두고자 한다.</p>
</blockquote>

<h2 id="1-개요">1. 개요</h2>

<p><strong>Helioviewer</strong>에서 <strong>PROBA-2 위성</strong>의 태양 관측 데이터를 파이썬 코드를 통해 처리한다.
처리한 데이터로 태양 표면 활동지역의 이동 속도를 구하고, 이를 이용하여 태양의 자전 주기를 구한다.</p>

<h2 id="2-modules">2. Modules</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">astropy.io.fits</span> <span class="k">as</span> <span class="n">fits</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<ul>
  <li><strong>numpy</strong>: 배열을 생성하고, 배열의 연산을 수행하는 모듈</li>
  <li><strong>astropy</strong>: 천문학 데이터를 읽고 처리하는 모듈
    <ul>
      <li><strong>fits</strong>: FITS 파일을 읽고 처리하는 모듈</li>
    </ul>
  </li>
  <li><strong>matplotlib</strong>: 데이터를 시각화해주는 모듈
    <ul>
      <li><strong>pyplot</strong>: 그래프를 그리는 모듈</li>
    </ul>
  </li>
</ul>

<h2 id="3-데이터-읽기">3. 데이터 읽기</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">image_data</span> <span class="o">=</span> <span class="n">fits</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'데이터 주소/데이터 이름.fits'</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">image_data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">data</span>
<span class="n">header</span> <span class="o">=</span> <span class="n">image_data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">header</span>
</code></pre></div></div>

<p>앞에서 import한 astropy.io.fits 모듈을 사용하여 FITS 파일을 읽는다. FITS 파일은 header와 data로 구성되어 있다. header와 data를 각각의 변수에 저장한다.</p>

<p><em>image_data.info()</em> 코드를 실행하면 image_data의 정보가 출력된다.</p>

<h2 id="4-데이터-시각화">4. 데이터 시각화</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 이 코드는 다음 에러를 무시하기 위한 코드이다.
# RuntimeWarning: divide by zero encountered in log
</span><span class="n">np</span><span class="p">.</span><span class="n">seterr</span><span class="p">(</span><span class="n">divide</span><span class="o">=</span><span class="s">'ignore'</span><span class="p">)</span>

<span class="n">image</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
<span class="c1"># 밝기 조절
</span><span class="n">max_value</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">percentile</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">min_value</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">percentile</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'hot'</span><span class="p">,</span> <span class="n">origin</span><span class="o">=</span><span class="s">'lower'</span><span class="p">,</span>
<span class="n">vmax</span><span class="o">=</span><span class="n">max_value</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=</span><span class="n">min_value</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><strong>np.array(data)</strong>를 사용하여 데이터를 배열로 변환한다. 이후 <strong>np.log</strong>를 사용하여 데이터를 로그로 변환한다. 천문학 데이터들은 스케일이 크기 때문에 로그 스케일로 변환하는게 좋다!
이제 numpy를 통해 필요한 데이터를 모두 처리했다.</p>

<p>본격적으로 matplotlib을 사용하여 데이터를 시각화해보자. <strong>plt.figure</strong>는 그래프 평면을 생성해준다. <strong>figsize</strong>로 그래프의 크기를 설정하자. <strong>plt.imshow</strong>는 그래프 평면 위에 데이터를 그리는 함수이다. 우리가 시각화 하고싶은 데이터인 <strong>image</strong>를 파라미터로 입력하자. 이후 데이터가 더 잘 보일 수 있게 하기 위해 <strong>cmap</strong>으로 색상을 결정한다. 그리고 <strong>vmax</strong>와 <strong>vmin</strong>을 통해 밝기의 최대값과 최솟값을 설정한다.</p>

<p>여기서 끝난다면 이미지 데이터는 상하반전이 된 채로 보일 것이다! 그 이유는 파이썬 배열의 특성에 있다. 파이썬 배열은 행렬 구조로 행은 위에서 아래로 진행하기 때문에 상하반전이 되는 것이다. 이를 해결하기 위해 <strong>origin=’lower’</strong>을 통해 우리가 아는 수학적, 물리적 좌표계로 전환해준다.</p>

<p>이제 <strong>plt.show</strong>를 실행하여 이미지를 console에 출력해보자!
<img src="/assets/images/astro_solar.png" alt="" class="align-center" />
다음과 같은 그래프가 출력된다면 성공이다!</p>

<h2 id="5-데이터-활용">5. 데이터 활용</h2>

<p>이제 관측 시간이 다른 2개 이상의 데이터를 사용하여 그래프를 출력한 뒤, 태양 표면 활동지역의 이동속도를 구하면 태양의 자전주기를 구할 수 있다!</p>

<blockquote>
  <p>태양 자전주기 = 2π x (태양 R) / (태양 표면 활동지역의 v)</p>
</blockquote>
:ET